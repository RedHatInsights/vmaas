#!/usr/bin/python -u
from __future__ import print_function

import argparse
import json
import sys

from database import Database
from updates import UpdatesAPI
from cve import CveAPI
from repos import RepoAPI, RepoCache
from psycopg2 import OperationalError

parser = argparse.ArgumentParser(description='VMaas test cli')


def arg_parser():
    parser.add_argument('-d', '--dbname', action='store', dest='db_name', default=None,
            help='database name to connect to'),
    parser.add_argument('-U', '--username', action='store', dest='db_user', default=None,
            help='database user name)'),
    parser.add_argument('-W', '--password', action='store', dest='db_pass', default=None,
            help='password to use)'),
    parser.add_argument('--host', action='store', dest='db_host', default=None,
            help='database server host or socket directory'),
    parser.add_argument('-p', '--port', action='store', dest='db_port', default=None,
            help='database server port'),

    subcommands = parser.add_subparsers(dest='command')

    updates_parser = subcommands.add_parser('updates', help='list updates for set of rpms')
    updates_parser.add_argument('--pkgfile', action='store', dest='pkgfile',
            help='read package names from file'),
    updates_parser.add_argument('pkgnames', action='store', nargs='*')

    cve_parser = subcommands.add_parser('cves', help='list details for CVEs')
    cve_parser.add_argument('--cvefile', action='store', dest='cvefile',
                                help='read CVE names from file'),
    cve_parser.add_argument('cvenames', action='store', nargs='*')

    cve_parser = subcommands.add_parser('repos', help='list details for repos')
    cve_parser.add_argument('--repofile', action='store', dest='repofile',
                                help='read repo labels from file'),
    cve_parser.add_argument('repolabels', action='store', nargs='*')

    return parser.parse_args()

def read_data(data_file, data_list, key):
    if not (data_file or data_list):
        print("Missing input arguments or file. Exiting.", file=sys.stderr)
        sys.exit(1)

    data = {}
    if data_file:
        with open(data_file, "r") as content:
            data = json.loads(content.read())

    if data_list:
        if key not in data:
            data[key] = []
        data[key].extend(data_list)

    return data

def main():
    options = arg_parser()

    answer = {}
    try:
        cursor = Database(options.db_name, options.db_user, options.db_pass,
                      options.db_host, options.db_port).cursor()
    except OperationalError as e:
        print('ERROR: ' + e.message, file=sys.stderr)
        parser.print_help(sys.stderr)
        sys.exit(1)

    repocache = RepoCache(cursor)

    try:
        if options.command == 'updates':
            data = read_data(options.pkgfile, options.pkgnames, "package_list")

            answer = UpdatesAPI(cursor, repocache).process_list(1, data)

        elif options.command == 'cves':
            data = read_data(options.cvefile, options.cvenames, "cve_list")

            answer = CveAPI(cursor).process_list(1, data)

        elif options.command == 'repos':
            data = read_data(options.repofile, options.repolabels, "repository_list")

            answer = RepoAPI(cursor, repocache).process_list(1, data)
    except ValueError as e:
        print("JSON parsing error: " + e.message)
        sys.exit(1)
    print(json.dumps(answer))

if __name__ == '__main__':
    main()
