name: CI

on:
  push:
    branches:
      - 'master'
      - 'stable'
  pull_request:
    branches:
      - 'stable'

jobs:
  integration-tests-local:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cancel previous builds
        uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - name: Docker Login
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          login-server: quay.io
      - name: Build VMaaS
        run: PIPENV_CHECK=0 docker-compose build --build-arg OVAL_FEED_BASE_URL="https://raw.githubusercontent.com/psegedy/vmaas-data/master/oval/"
      - name: Run VMaaS
        run: PIPENV_CHECK=0 docker-compose up -d
      - name: Wait for VMaaS to run
        run: |
          set +e
          resp=1
          while [ "$resp" -ne 0 ]; do
            curl http://localhost:8080/api/v1/monitoring/health
            resp=$?
          done
      - name: Sync VMaaS repolist
        run: ./scripts/setup_db.sh conf/repolist.json
      - name: Run VMaaS integration tests
        run: |
          docker run --name iqe --network host \
            -e IQE_TESTS_LOCAL_CONF_PATH=/iqe_settings ${{ secrets.IQE_TESTS_IMAGE }} \
            iqe tests plugin vulnerability -k 'not reconnect' -m vmaas --long-running --html=report.html --self-contained-html
      - run: docker-compose logs > logs
        if: always()
      - run: docker cp iqe:/iqe_venv/report.html .
        if: always()
      - name: Publish test results
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: test-report-local
          path: report.html
      - name: Publish logs
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: docker-compose-logs
          path: logs

  integration-tests-openshift:
    runs-on: ubuntu-latest
    env:
      E2E_DEPLOY_PATH: "$GITHUB_WORKSPACE/e2e-deploy"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Check out e2e-deploy
        uses: actions/checkout@v2
        with:
          repository: RedHatInsights/e2e-deploy
          token: "${{ secrets.VMAAS_BOT }}"
          path: e2e-deploy
      - name: Cancel previous builds
        uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install e2e-deploy's dependencies
        run: |
          pip install -U pip
          pip install -r "${{ env.E2E_DEPLOY_PATH }}/requirements.txt"
      - name: Install oc
        uses: redhat-actions/oc-installer@v1
        with:
          oc_version: '3.11.154'
      - name: Docker Login
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          login-server: quay.io
      - name: OpenShift Login
        run: |
          oc login "${{ secrets.OPENSHIFT_SERVER_URL }}" --token "${{ secrets.OPENSHIFT_TOKEN }}"
          oc project vmaas-qe
      - name: Wipe test environment
        run: |
          oc project vmaas-qe
          ocdeployer wipe -f vmaas-qe -l app=vmaas
          # make sure that DB volume is deleted
          oc delete pvc vmaas-database-data || true
      - name: Build VMaaS
        run: |
          cd ${{ env.E2E_DEPLOY_PATH }}
          cat <<EOF > env/builder-env.yml
          vmaas/vmaas-app:
            parameters:
              SOURCE_REPOSITORY_REF: "${{ github.ref }}"
              SOURCE_REPOSITORY_URL: "https://github.com/${{ github.repository }}"
              QE_BUILD: TRUE
          vmaas/vmaas-database:
            parameters:
              SOURCE_REPOSITORY_REF: "${{ github.ref }}"
              SOURCE_REPOSITORY_URL: "https://github.com/${{ github.repository }}"
          EOF

          ocdeployer deploy -f --sets vmaas \
            --template-dir buildfactory \
            -e builder-env vmaas-qe --secrets-src-project secrets
      - name: Deploy VMaaS
        run: |
          cd ${{ env.E2E_DEPLOY_PATH }}
          ocdeployer deploy -f --sets vmaas -e vmaas-qe vmaas-qe
      - name: Expose routes
        run: |
          oc project vmaas-qe
          webapp="${{ secrets.OPENSHIFT_WEBAPP_URL }}"
          reposcan="${{ secrets.OPENSHIFT_REPOSCAN_URL }}"
          cat <<EOF > webapp-route.yaml
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: vmaas-webapp
            namespace: vmaas-qe
          spec:
            host: ${webapp#http://}
            port:
              targetPort: 8080
            to:
              kind: Service
              name: vmaas-webapp
              weight: 100
            wildcardPolicy: None
          EOF

          cat <<EOF > reposcan-route.yaml
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: vmaas-reposcan
            namespace: vmaas-qe
          spec:
            host: ${reposcan#http://}
            port:
              targetPort: 8081
            to:
              kind: Service
              name: vmaas-reposcan
              weight: 100
            wildcardPolicy: None
          EOF

          oc apply -f webapp-route.yaml
          oc apply -f reposcan-route.yaml
      - name: Start VMaaS webapp with coverage
        run: |
          webapp_pod="$(oc get pods | grep 'Running' | grep 'webapp' | awk '{print $1}')"
          oc exec "${webapp_pod}" -- bash -c "cd webapp && coverage-3 run -m main --source webapp &>/proc/1/fd/1" &
      - name: Sync VMaaS repolist
        run: |
          ./scripts/setup_db.sh conf/repolist.json \
          ${{ secrets.OPENSHIFT_REPOSCAN_URL }} \
          ${{ secrets.OPENSHIFT_WEBAPP_URL }} \
          ${{ secrets.VMAAS_BOT }}
      - name: Run VMaaS integration tests
        run: |
          cat <<EOF > settings.local.yaml
          default:
            VULNERABILITY:
              vmaas:
                github:
                  token: "${{ secrets.VMAAS_BOT }}"
                hostname: "${{ secrets.OPENSHIFT_WEBAPP_URL }}"
                auth_token: "${{ secrets.VMAAS_BOT }}"
          EOF
          docker run --name iqe --network host \
            -v $(readlink -f settings.local.yaml):/iqe_settings/settings.local.yaml:z \
            -e IQE_TESTS_LOCAL_CONF_PATH=/iqe_settings ${{ secrets.IQE_TESTS_IMAGE }} \
            iqe tests plugin vulnerability -m vmaas --html=report.html --self-contained-html
      - name: Collect code-coverage
        if: always()
        run: |
          webapp_pod="$(oc get pods | grep 'Running' | grep 'webapp' | awk '{print $1}')"
          oc exec ${webapp_pod} -- pkill -sigint coverage-3
          oc exec ${webapp_pod} -- coverage-3 html --omit /usr/\\* -d /tmp/htmlcov
          mkdir htmlcov
          oc cp ${webapp_pod}:/tmp/htmlcov htmlcov
          oc exec ${webapp_pod} -- bash -c 'cd webapp && python3 -m main &>/proc/1/fd/1' &
      - name: Get OpenShift logs
        if: always()
        run: |
          oc project vmaas-qe
          mkdir -p applogs/
          PODS=$(oc get pods -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}')
          for pod in $PODS; do
              CONTAINERS=$(oc get pod $pod -o jsonpath='{range .spec.containers[*]}{.name}{"\n"}' || echo "")
              if [ -z "$CONTAINERS" ]; then
                  echo "get logs: pod $pod not found"
              fi;
              for container in $CONTAINERS; do
                  oc logs $pod -c $container > applogs/${pod}_${container}.log || echo "get logs: ${pod}_${container} failed."
                  echo "Saved logs for $pod container $container"
              done
          done
      - run: docker cp iqe:/iqe_venv/report.html .
        if: always()
      - name: Publish test results
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: test-report-openshift
          path: report.html
      - name: Publish coverage report
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: coverage-report
          path: htmlcov
      - name: Publish logs
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: openshift-logs
          path: applogs
